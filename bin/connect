#!/bin/bash

# @parseArger-begin
# @parseArger-help "connect to a server" --option "help" --short-option "h"
# @parseArger-version "0.3.1" --option "version" --short-option "v"
# @parseArger-verbose --option "verbose" --level "0" --quiet-option "quiet"
# @parseArger-source $SSHM0_ROOT_DIR/bin/utils
source "$SSHM0_ROOT_DIR/bin/utils";
# @parseArger-leftovers leftovers
# @parseArger-declarations
# @parseArger pos name "server name" --complete-custom "/usr/bin/ls /home/didi/.config/sshm0/servers"
# @parseArger opt cd "cd to directory"
# @parseArger opt exec-before "commands to execute before the shell" --repeat
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing

__cli_arg_count=$#;

die()
{
	local _ret=1
    if [[ -n "$2" ]] && [[ "$2" =~ ^[0-9]+$ ]]; then
   	_ret="$2"
    fi
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_optional_positionals=();
_arg_name="";
# OPTIONALS ARGUMENTS
_arg_cd=
_arg_exec_before=()
# FLAGS
# NESTED
# LEFTOVERS
_arg_leftovers=()
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "connect to a server:"
	echo -e "	name: server name"
	echo -e "	--cd <cd>: cd to directory"
	echo -e "	--exec-before <exec-before>: commands to execute before the shell, repeatable"
	echo -e "Usage :
	$0 <name> [--cd <value>] [--exec-before <value>]";
	fi

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:-0}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="\033[0;31m";
				;;
			-2)
				_arg_COLOR="\033[0;33m";
				;;
			-1)
				_arg_COLOR="\033[1;33m";
				;;
			1)
				_arg_COLOR="\033[0;32m";
				;;
			2)
				_arg_COLOR="\033[1;36m";
				;;
			3)
				_arg_COLOR="\033[0;36m";
				;;
			*)
				_arg_COLOR="\033[0m";
				;;
		esac
		echo -e "${_arg_COLOR}${_arg_msg}\033[0m";
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--cd)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_cd="$2"
				shift
				;;
			--cd=*)
				_arg_cd="${_key##--cd=}"
				;;
			
			--exec-before)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_exec_before+=("$2")
				shift
				;;
			--exec-before=*)
				_arg_exec_before+=("${_key##--exec-before=}")
				;;
			
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			-v|--version)
				print_version;
				exit 0;
				;;
			-v*)
				print_version;
				exit 0;
				;;
			--verbose)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level + 1))";
					else
						_verbose_level="$2";
						shift;
					fi
					;;
				--quiet)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level - 1))";
					else
						_verbose_level="-$2";
						shift;
					fi
					;;
				
				*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="name"
	if [ "${_positionals_count}" -lt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="_arg_name ";
	_leftovers_count=$((${#_positionals[@]} - 1))
	for ((ii = 0; ii < _leftovers_count; ii++));do
		_positional_names="$_positional_names _arg_leftovers[$((ii + 0))]";
	done

	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		if ! [[ "$_positional_name" =~ "_arg_leftovers" ]];then
			eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
		fi
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "	name: ${_arg_name}";
	echo -e "	cd: ${_arg_cd}";
	echo -e "	exec-before: ${_arg_exec_before[*]}";
	echo -e "	leftovers: ${_arg_leftovers[*]}";

}


print_version()
{
	echo "0.3.1";
}


on_interrupt() {
	die Process aborted! 130;
}


parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;



# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

#shellcheck source=../server.dist
if sshm0_load_server "$_arg_name"; then
  coarg=("${sshm0_server_user}@${sshm0_server_ip}" "-p" "${sshm0_server_port}");
	
	log "Connecting to $_arg_name :
	${sshm0_server_user}@${sshm0_server_ip}:${sshm0_server_port}" 2;

  if [ "$sshm0_server_auth" == "key" ]; then
		log "Using auth key\n$sshm0_server_key" 2;

    coarg+=("-i" "$sshm0_server_key");
  fi

	ecmd="";
  if [ "$_arg_cd" != "" ] || [ "$sshm0_server_cd" != "" ] || [ "${#_arg_exec_before[@]}" -gt 0 ]; then
		if [ "$_arg_cd" != "" ]; then
			log "Remote directory :
	$_arg_cd" 2;

			ecmd+="cd $_arg_cd;";
		elif [ "$sshm0_server_cd" != "" ]; then
			log "Default Remote directory :
	$sshm0_server_cd" 2;
			ecmd+="cd $sshm0_server_cd;";
		fi

		if [ "${#_arg_exec_before[@]}" -gt 0 ]; then
			log "Executing before :" 2;
			for ebefore in "${_arg_exec_before[@]}"; do
				log "	$ebefore" 2;
				ecmd+="$ebefore;";
			done
		elif [ "${#sshm0_server_exec_before[@]}" -gt 0 ]; then
			log "Executing before :" 2;
			for ebefore in "${sshm0_server_exec_before[@]}"; do
				log "	$ebefore" 2;
				ecmd+="$ebefore;";
			done
		fi
  fi

	if [ "${#_arg_leftovers[@]}" -gt 0 ]; then
		log "Command specified :\n\t${_arg_leftovers[*]}" 2;
		ecmd+="${_arg_leftovers[*]}";
	elif [ "$ecmd" != "" ]; then
		# run shell after if exec before specified
		ecmd+="\"\$(echo \$SHELL)\"";
	fi

	# if a command exists, set the -t
	if [ "$ecmd" != "" ]; then
		coarg+=("-t");
	fi

	# https://stackoverflow.com/a/38745725
	# that is awesome :D
  if [ "$sshm0_server_auth" == "password" ] && [ "$sshm0_server_password" != "" ]; then
		if [ "$sshm0_server_password_bad" != "I KNOW" ]; then
			log "Using auth password BAAAADDDDD !!" -1;
		fi
		_tmpps="$(mktemp)";
		echo "echo \"$sshm0_server_password\"" > "$_tmpps";
		chmod 777 "$_tmpps";
		export SSH_ASKPASS="$_tmpps";
		export DISPLAY="YOURDOINGITWRONG";
		coarg+=(-p);
  fi

  setsid ssh "${coarg[@]}" "$ecmd";
  
	if [ "$_tmpps" != "" ] && [ -f "$_tmpps" ]; then
		rm -f "$_tmpps";
  fi
else
  die "Server '$_arg_name' not found." 1;
fi
