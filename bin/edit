#!/bin/bash

# @parseArger-begin
# @parseArger-help "add a server" --option "help" --short-option "h"
# @parseArger-source $SSHM0_ROOT_DIR/bin/utils
source "$SSHM0_ROOT_DIR/bin/utils";
# @parseArger-declarations
# @parseArger pos name "server name"
# @parseArger opt ip "ip address"
# @parseArger opt user "username"
# @parseArger opt password "user password for the server" --short p
# @parseArger opt key "ssh private key" --short i
# @parseArger opt auth "authentication type" --one-of "" --one-of "key" --one-of "password"
# @parseArger opt port "ssh port"
# @parseArger-declarations-end

# @parseArger-parsing
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_arg_name="";
# OPTIONALS ARGUMENTS
_arg_ip=
_arg_user=
_arg_password=
_arg_key=
_arg_auth=
_one_of_arg_auth=("" "key" "password" );
_arg_port=
# FLAGS


print_help()
{
	echo -e "add a server:"
	echo -e "	name: server name"
	echo -e "	--ip <ip>: ip address"
	echo -e "	--user <user>: username"
	echo -e "	-p, --password <password>: user password for the server"
	echo -e "	-i, --key <key>: ssh private key"
	echo -e "	--auth <auth>: authentication type [one of '' 'key' 'password']"
	echo -e "	--port <port>: ssh port"
	echo -e "Usage :
	$0 <> [--ip <value>] [--user <value>] [--password <value>] [--key <value>] [--auth <value>] [--port <value>]"
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--ip)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_ip="$2"
				shift
				;;
			--ip=*)
				_arg_ip="${_key##--ip=}"
				;;
			
			--user)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_user="$2"
				shift
				;;
			--user=*)
				_arg_user="${_key##--user=}"
				;;
			
			-p|--password)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_password="$2"
				shift
				;;
			--password=*)
				_arg_password="${_key##--password=}"
				;;
			-p*)
				_arg_password="${_key##-p}"
				;;
			
			-i|--key)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_key="$2"
				shift
				;;
			--key=*)
				_arg_key="${_key##--key=}"
				;;
			-i*)
				_arg_key="${_key##-i}"
				;;
			
			--auth)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_auth="$2"
				if [[ "${#_one_of_arg_auth[@]}" -gt 0 ]];then [[ "${_one_of_arg_auth[*]}" =~ (^|[[:space:]])"$_arg_auth"($|[[:space:]]) ]] || die "auth must be one of:  key password";fi
				shift
				;;
			--auth=*)
				_arg_auth="${_key##--auth=}"
				if [[ "${#_one_of_arg_auth[@]}" -gt 0 ]];then [[ "${_one_of_arg_auth[*]}" =~ (^|[[:space:]])"$_arg_auth"($|[[:space:]]) ]] || die "auth must be one of:  key password";fi
				;;
			
			--port)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_port="$2"
				shift
				;;
			--port=*)
				_arg_port="${_key##--port=}"
				;;
			
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="name"
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="_arg_name ";
	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1
eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "\t: ${_arg_name}";
	echo -e "\tuser: ${_arg_ip | sed 's/-/_/g'}";
	echo -e "\tpassword: ${_arg_user | sed 's/-/_/g'}";
	echo -e "\tkey: ${_arg_password | sed 's/-/_/g'}";
	echo -e "\tauth: ${_arg_key | sed 's/-/_/g'}";
	echo -e "\tport: ${_arg_auth | sed 's/-/_/g'}";
	echo -e "\t: ${_arg_port | sed 's/-/_/g'}";

}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end


if sshm0_load_server "$_arg_name"; then
#shellcheck source=../server.dist
	if [ "$_arg_ip" != "" ]; then
		sshm0_server_ip="$_arg_ip"
	fi
	
	if [ "$_arg_user" != "" ]; then
		sshm0_server_user="$_arg_user"
	fi

	edArg=("--force" "$_arg_name" "$sshm0_server_ip" "$sshm0_server_user");
	
	if [ "$_arg_port" != "" ]; then
		edArg+=("--port" "$_arg_port")
	fi
	if [ "$_arg_auth" != "" ]; then
		edArg+=("--auth" "$_arg_auth")
	fi
	if [ "$_arg_password" != "" ]; then
		edArg+=("--password" "$_arg_password")
	fi
	if [ "$_arg_key" != "" ]; then
		edArg+=("--key" "$_arg_key")
	fi

  "$SSHM0_ROOT_DIR/bin/add" "${edArg[@]}"
else
  die "Server '$_arg_name' not found." 1;
fi
