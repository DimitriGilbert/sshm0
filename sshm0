#!/bin/bash

# @parseArger-begin
# @parseArger-help "sshM0: A CLI ssh manager" --option "help" --short-option "h"
# @parseArger-version "0.2.1" --option "version" --short-option "v"
# @parseArger-verbose --option "verbose" --level "0"
# @parseArger-set export SSHM0_ROOT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")";pwd -P);
export SSHM0_ROOT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")";pwd -P);
# @parseArger-source $SSHM0_ROOT_DIR/bin/utils
source "$SSHM0_ROOT_DIR/bin/utils";
# @parseArger-leftovers leftovers
# @parseArger-declarations
# @parseArger pos target "what to do" --subcommand-directory "bin" --subcommand-use-leftovers --subcommand --one-of "list" --one-of "add" --one-of "edit" --one-of "connect" --one-of "remove" --one-of "plugin" --one-of "cp" --one-of "cp"
# @parseArger opt config-dir "directory containing the configurations" --default-value "/home/didi/.config/sshm0"
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_arg_target="";
_one_of_arg_target=("list" "add" "edit" "connect" "remove" "plugin" "cp" "cp" );
_arg_subcommand_arg="_arg_target";
__subcommand=();
# OPTIONALS ARGUMENTS
_arg_config_dir="/home/didi/.config/sshm0"
# FLAGS
# LEFTOVERS
_arg_leftovers=()
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [ "${#_positionals[@]}" -ge 1 ]; then
		echo "$0 sub command help
	"
		_triggerSCHelp=0;
	else
	

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "sshM0: A CLI ssh manager:"
	echo -e "	target: what to do [one of 'list' 'add' 'edit' 'connect' 'remove' 'plugin' 'cp' 'cp']"
	echo -e "	--config-dir <config-dir>: directory containing the configurations [default: ' /home/didi/.config/sshm0 ']"
	echo -e "Usage :
	$0 <target> [--config-dir <value>]";
	fi

	fi
	

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:"0"}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="\033[0;31m";
				;;
			-2)
				_arg_COLOR="\033[0;33m";
				;;
			-1)
				_arg_COLOR="\033[1;33m";
				;;
			1)
				_arg_COLOR="\033[0;32m";
				;;
			2)
				_arg_COLOR="\033[1;36m";
				;;
			3)
				_arg_COLOR="\033[0;36m";
				;;
			*)
				_arg_COLOR="\033[0m";
				;;
		esac
		echo -e "${_arg_COLOR}${_arg_msg}\033[0m";
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--config-dir)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_config_dir="$2"
				shift
				;;
			--config-dir=*)
				_arg_config_dir="${_key##--config-dir=}"
				;;
			
			-h|--help)
				print_help;
				;;
			-h*)
				print_help;
				;;
			-v|--version)
				print_version;
				exit 0;
				;;
			-v*)
				print_version;
				exit 0;
				;;
			--verbose)
				if [ $# -lt 2 ];then
					_verbose_level="$((_verbose_level + 1))";
				else
					_verbose_level="$2";
					shift;
				fi
				;;
			
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="target"
	if [ "${_positionals_count}" -lt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="_arg_target ";
	_leftovers_count=$((${#_positionals[@]} - 1))
	for ((ii = 0; ii < _leftovers_count; ii++));do
		_positional_names="$_positional_names _arg_leftovers[$((ii + 0))]";
	done

	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		if ! [[ "$_positional_name" =~ "_arg_leftovers" ]];then
			eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
			__subcommand+=("$_SCRIPT_DIR/bin/${1}");
		fi
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "\ttarget: ${_arg_target}";
	echo -e "\tconfig-dir: ${_arg_config_dir}";
	echo -e "\tleftovers: ${_arg_leftovers[*]}";

}

print_version()
{
	echo "0.2.1";
}

on_interrupt() {
	die Process aborted! 130;
}

parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;


if [ "$_triggerSCHelp" == "0" ];then
	__subcommand+=("--help");
fi
__subcommand+=("${_arg_leftovers[@]}");

# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

export SSHM0_CONFIG_DIR="$_arg_config_dir";

if [ ! -d "$SSHM0_CONFIG_DIR" ]; then
	sshm0_install;
fi

# shellcheck source=config.dist
source "$SSHM0_CONFIG_DIR/config";

log "subcommand :" 3;
log "\t\t${__subcommand[*]}" 3;

"${__subcommand[@]}";
